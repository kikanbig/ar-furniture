#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –†–ï–ê–õ–¨–ù–´–• FBX –º–æ–¥–µ–ª–µ–π –≤ GLB —Ñ–æ—Ä–º–∞—Ç
"""

import bpy
import os
import sys

def clear_scene():
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É Blender"""
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)

def convert_fbx_to_glb(fbx_path, output_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å FBX –≤ GLB"""
    print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {fbx_path} -> {output_path}")
    
    # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É
    clear_scene()
    
    # –ò–º–ø–æ—Ä—Ç FBX
    try:
        bpy.ops.import_scene.fbx(filepath=fbx_path)
        print(f"‚úÖ FBX –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {fbx_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FBX: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if len(bpy.context.scene.objects) == 0:
        print("‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ")
        return False
    
    print(f"üì¶ –û–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ: {len(bpy.context.scene.objects)}")
    for obj in bpy.context.scene.objects:
        print(f"  - {obj.name} ({obj.type})")
    
    # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    bpy.ops.object.select_all(action='SELECT')
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ GLB
    try:
        bpy.ops.export_scene.gltf(
            filepath=output_path,
            export_format='GLB',
            use_selection=True,
            export_materials='EXPORT',
            export_image_format='AUTO',
            export_yup=True
        )
        print(f"‚úÖ GLB —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ GLB: {e}")
        return False

def main():
    print("üõãÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –†–ï–ê–õ–¨–ù–´–• –º–æ–¥–µ–ª–µ–π –¥–∏–≤–∞–Ω–æ–≤ –≤ GLB")
    
    # –ü—É—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º FBX —Ñ–∞–π–ª–∞–º
    models = [
        {
            'name': 'cannoli-sofa',
            'fbx': '../Cannoli sofa/Export/Cannoli sofa.fbx',
            'glb': 'public/models/cannoli-sofa.glb'
        },
        {
            'name': 'bellagio-sofa', 
            'fbx': '../Sofa Bellagio/Export/Sofa Bellagio.fbx',
            'glb': 'public/models/bellagio-sofa.glb'
        }
    ]
    
    # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π
    os.makedirs('public/models', exist_ok=True)
    
    success_count = 0
    for model in models:
        print(f"\n{'='*50}")
        print(f"üõãÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {model['name']}")
        print(f"{'='*50}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ FBX —Ñ–∞–π–ª–∞
        if not os.path.exists(model['fbx']):
            print(f"‚ùå FBX —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {model['fbx']}")
            continue
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        if convert_fbx_to_glb(model['fbx'], model['glb']):
            success_count += 1
            file_size = os.path.getsize(model['glb']) / 1024  # KB
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} KB")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {model['name']}")
    
    print(f"\n{'='*50}")
    print(f"üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(models)}")
    print(f"{'='*50}")

if __name__ == "__main__":
    main()